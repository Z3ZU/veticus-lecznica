// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6FdjgAyps8XDCSRfwRbJca
// Component: Re6zUsQooKFE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DuU_UFDf12SY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_veticus_lecznica.module.css"; // plasmic-import: 6FdjgAyps8XDCSRfwRbJca/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: Re6zUsQooKFE/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  main?: p.Flex<"div">;
  oNas?: p.Flex<"div">;
  oNasBackground?: p.Flex<"div">;
  kontakt?: p.Flex<"div">;
  kontaktBackground?: p.Flex<"div">;
  uslugi?: p.Flex<"div">;
  uslugiBackground?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Veticus Wojciech Kubas"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Veticus Wojciech Kubas"}
        />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              defaultcss.all,
              projectcss.root_reset,
              sty.main
            )}
          >
            {false ? (
              <div className={classNames(defaultcss.all, sty.box___6Ppql)}>
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__t6I05)}
                  height={2048 as const}
                  role={"img"}
                  src={"/plasmic/veticus_lecznica/images/photo1.jpeg"}
                  width={1536 as const}
                />
              </div>
            ) : null}

            <div className={classNames(defaultcss.all, sty.box__sr3Wi)}>
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__aWgnM)}
                height={256 as const}
                role={"img"}
                src={"/plasmic/veticus_lecznica/images/logo.png"}
                width={1024 as const}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : false
              ) ? (
                <div className={classNames(defaultcss.all, sty.box__gIrmH)} />
              ) : null}

              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__kvRb)}
                height={512 as const}
                role={"img"}
                src={"/plasmic/veticus_lecznica/images/logoIzba1Png.png"}
                width={512 as const}
              />
            </div>

            <div
              data-plasmic-name={"oNas"}
              data-plasmic-override={overrides.oNas}
              className={classNames(defaultcss.all, sty.oNas)}
            >
              <div
                data-plasmic-name={"oNasBackground"}
                data-plasmic-override={overrides.oNasBackground}
                className={classNames(defaultcss.all, sty.oNasBackground)}
              >
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__pzVZp)}
                  height={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (1402 as const)
                      : (2906 as const)
                  }
                  role={"img"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "/plasmic/veticus_lecznica/images/pexelsBasMasseus1203309Mobilejpg.jpeg"
                      : "/plasmic/veticus_lecznica/images/pexelsBasMasseus1203309Jpg.jpeg"
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (1765 as const)
                      : (3875 as const)
                  }
                />
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__qcpd6
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "O nas"
                  : "O nas\n"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__nf4NP
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? 'Gabinet "Veticus" to nowoczesny zakład weterynaryjny. Zajmujemy się leczeniem zwierząt towarzyszących\ni gospodarskich.\n\nCechuje nas doświadczenie w pracy ze zwierzętami i pasja związana  z wykonywaniem zawodu lekarza weterynarii. Naszą ambicją jest tworzenie miejsca, które oferuje fachową pomoc oraz przyjazną atmosferę.\n'
                  : '\nGabinet "Veticus" to nowoczesny zakład weterynaryjny. Zajmujemy się leczeniem zwierząt towarzyszących i gospodarskich.\n\nCechuje nas doświadczenie w pracy ze zwierzętami i pasja związana \nz wykonywaniem zawodu lekarza weterynarii. Naszą ambicją jest tworzenie miejsca, które oferuje fachową pomoc oraz przyjazną atmosferę.\n'}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : false
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__bsss9
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\n\n\n"
                    : "\n\n\n"}
                </div>
              ) : null}
            </div>

            <div
              data-plasmic-name={"kontakt"}
              data-plasmic-override={overrides.kontakt}
              className={classNames(defaultcss.all, sty.kontakt)}
            >
              <div
                data-plasmic-name={"kontaktBackground"}
                data-plasmic-override={overrides.kontaktBackground}
                className={classNames(defaultcss.all, sty.kontaktBackground)}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__cNzV8
                )}
              >
                {
                  "poniedziałek - piątek \n12:00 - 18:00\nsobota\n10:00 - 14:00\n"
                }
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__sFLyi
                )}
              >
                {
                  "Sędziszów Małopolski\nul. Tarnowskich 1\nkontakt@veticus-lecznica.pl\ntel. 506 039 315"
                }
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__h2U4J
                )}
              >
                {
                  "Przypadki wymagające natychmiastowej pomocy przyjmujemy poza kolejnością, prosimy jednak poinformować nas o przybyciu, jeżeli jest taka możliwość.\nPomocy w nagłych przypadkach udzielamy całodobowo.\n"
                }
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__bdiLe
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Kontakt\n"
                  : "Kontakt"}
              </div>
            </div>

            <div
              data-plasmic-name={"uslugi"}
              data-plasmic-override={overrides.uslugi}
              className={classNames(defaultcss.all, sty.uslugi)}
            >
              <div
                data-plasmic-name={"uslugiBackground"}
                data-plasmic-override={overrides.uslugiBackground}
                className={classNames(defaultcss.all, sty.uslugiBackground)}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__l8FYe
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Usługi\n"
                  : "Usługi"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__szNM
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <span>
                    <span style={{ fontWeight: 700 }}>{"■ kardiologia"}</span>
                    <React.Fragment>
                      {
                        " (badania przeglądowe serca, diagnostyka wad serca, diagnostyka chorób nabytych, badanie radiologiczne klatki piersiowej)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ chirurgia"}</span>
                    <React.Fragment>
                      {
                        " (szeroki zakres zabiegów chirurgicznych: zabiegi na jamie brzusznej, zabiegi na klatce piersiowej, zabiegi ortopedyczne)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ onkologia  "}</span>
                    <React.Fragment>
                      {"(chirurgia onkologiczna)\n\n"}
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ dermatologia  "}
                    </span>
                    <React.Fragment>
                      {
                        "(diagnostyka dermatologiczna, badania bakteriologiczne, zeskrobiny skóry, biopsje skóry)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ okulistyka "}</span>
                    <React.Fragment>
                      {"(zabiegi na gałce ocznej, korekcja powiek)\n\n"}
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ stomatologia "}</span>
                    <React.Fragment>
                      {
                        "(usuwanie kamienia nazębnego ultradźwiękami, leczenie chorób przyzębia, ekstrakcja zębów, resorpcja korzeni, stomatologia gryzoni i zajęczaków)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ położnictwo i rozród "}
                    </span>
                    <React.Fragment>
                      {
                        "(wyznaczanie terminu krycia, diagnoza ciąży, kontrola przebiegu ciąży)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ badania laboratoryjne "}
                    </span>
                    <React.Fragment>
                      {
                        "(morfologia, biochemia, hormony, badanie moczu, badanie kału, testy w kierunku chorób zakaźnych)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ diagnostyka obrazowa "}
                    </span>
                    <React.Fragment>
                      {"(badania USG, RTG, rentgen)\n\n"}
                    </React.Fragment>
                  </span>
                ) : (
                  <span>
                    <span style={{ fontWeight: 700 }}>{"■ kardiologia"}</span>
                    <React.Fragment>
                      {
                        " (badania przeglądowe serca, diagnostyka wad serca, diagnostyka chorób nabytych, badanie radiologiczne klatki piersiowej)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ chirurgia"}</span>
                    <React.Fragment>
                      {
                        " (szeroki zakres zabiegów chirurgicznych: zabiegi na jamie brzusznej, zabiegi na klatce piersiowej, zabiegi ortopedyczne)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ onkologia  "}</span>
                    <React.Fragment>
                      {"(chirurgia onkologiczna)\n\n"}
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ dermatologia  "}
                    </span>
                    <React.Fragment>
                      {
                        "(diagnostyka dermatologiczna, badania bakteriologiczne, zeskrobiny skóry, biopsje skóry)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ okulistyka "}</span>
                    <React.Fragment>
                      {"(zabiegi na gałce ocznej, korekcja powiek)\n\n"}
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"■ stomatologia "}</span>
                    <React.Fragment>
                      {
                        "(usuwanie kamienia nazębnego ultradźwiękami, leczenie chorób przyzębia, ekstrakcja zębów, resorpcja korzeni, stomatologia gryzoni i zajęczaków)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ położnictwo i rozród "}
                    </span>
                    <React.Fragment>
                      {
                        "(wyznaczanie terminu krycia, diagnoza ciąży, kontrola przebiegu ciąży)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ badania laboratoryjne "}
                    </span>
                    <React.Fragment>
                      {
                        "(morfologia, biochemia, hormony, badanie moczu, badanie kału, testy w kierunku chorób zakaźnych)\n\n"
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"■ diagnostyka obrazowa "}
                    </span>
                    <React.Fragment>
                      {"(badania USG, RTG, rentgen)\n"}
                    </React.Fragment>
                  </span>
                )}
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "oNas",
    "oNasBackground",
    "kontakt",
    "kontaktBackground",
    "uslugi",
    "uslugiBackground"
  ],
  oNas: ["oNas", "oNasBackground"],
  oNasBackground: ["oNasBackground"],
  kontakt: ["kontakt", "kontaktBackground"],
  kontaktBackground: ["kontaktBackground"],
  uslugi: ["uslugi", "uslugiBackground"],
  uslugiBackground: ["uslugiBackground"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  main: "div";
  oNas: "div";
  oNasBackground: "div";
  kontakt: "div";
  kontaktBackground: "div";
  uslugi: "div";
  uslugiBackground: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicHomepage__Fetches;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    oNas: makeNodeComponent("oNas"),
    oNasBackground: makeNodeComponent("oNasBackground"),
    kontakt: makeNodeComponent("kontakt"),
    kontaktBackground: makeNodeComponent("kontaktBackground"),
    uslugi: makeNodeComponent("uslugi"),
    uslugiBackground: makeNodeComponent("uslugiBackground"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
